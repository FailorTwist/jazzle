async function(DECL|FN|HEAD|ASYNC) {DECL|FN|BODY|ASYNC}
function a(FN|DECL|HEAD) {FN|DECL|BODY} 
function* a(GEN|DECL|HEAD) {GEN|DECL|BODY} 
(ARROW|HEAD) => {ARROW|BODY}
class a {CLS|DECL}
try {} catch (CATCH|HEAD) {CATCH|BODY}
while (false) BODY
while (fasle) {BODY|BLOCK}
{BLOCK}
(class { a(CLASSMEM|METH|HEAD) {CLASSMEM|METH|BODY} });
(class { async a(CLASSMEM|ASYNC|HEAD) {CLASSMEM|ASYNC|BODY} });
(class { set a(CLASSMEM|SETTER|HEAD) {CLASSMEM|SETTER|HEAD} });
(class { get a(CLASSMEM|GETTER|HEAD) {CLASSMEM|GETTER|HEAD} });
(class { constructor(CLASSMEM|CTOR|HEAD) {CLASSMEM|CTOR|BODY} });
(class { *a(CLASSMEM|GEN|HEAD) {CLASSMEM|GEN|BODY} });
(class { static a(STATICMEM|METH|HEAD) {STATICMEM|METH|BODY} });
(class { static async a(STATICMEM|ASYNC|HEAD) {STATICMEM|ASYNC|BODY} });
(class { static set a(STATICMEM|SETTER|HEAD) {STATICMEM|SETTER|BODY} });
(class { static get a(STATICMEM|GETTER|HEAD) {STATICMEM|GETTER|BODY} });
(class { static *a(STATICMEM|GEN|HEAD) {STATICMEM|GEN|BODY} });
({ a(OBJMEM|METH|HEAD) {OBJMEM|METH|BODY} });
({ async a(OBJMEM|ASYNC|HEAD) {OBJMEM|ASYNC|BODY} });
({ set a(OBJMEM|SETTER|HEAD) {OBJMEM|SETTER|BODY} });
({ get a(OBJMEM|GETTER|HEAD) {OBJMEM|GETTER|BODY} });
({ *a(OBJMEM|GEN|HEAD) {OBJMEM|GEN|BODY} });

ASYNC, HEAD, OBJMEM, DECL, FN, CTOR, CLS, GEN, ARROW, CATCH, 

Scope {
  parent, type, refs, defs, scopeID,
  scs, diStart, allowedActions, misc,
  hasTZCheckpoint
}

ConcreteScope < Scope {
  liquidDefs,
  synthNamesUntilNow
}

FunScope < ConcreteScope {
  argList
}
