// ctor.js
 export default Constructor() {}
 export var cls = Constructor.prototype;

// whole.js
 import Constructor from './ctor';
 export default Constructor;
 import './sub1' ... './subn'

// subm-n.js
 import Constructor from './ctor'

// what if
// a.js
 import {B} from './b';
 export function A() { return B }

// b.js
 import {A} from './a';
 export function B() {}
 B.n = createObj(A);

// bundling('./a.js')
'./b.js' then './a.js'

// a.js
 import B from './b.js';
 export class A { constructor() { this.B = B } }

// b.js
 import A from './a.js';
 export class B extends A {}

 class B extends A {}
 class A { constructor() { this.B = B } }

for './a' to come first, start bundling from a source that:
  * will certainly be included in the bundle that is going to be made
  * has directly or indirectly imported './a'
